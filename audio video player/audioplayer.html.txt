<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SoundWave - Premium Audio Player</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
            color: white;
            overflow-x: hidden;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            position: relative;
        }

        .logo {
            font-size: 3rem;
            font-weight: 800;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
            animation: glow 3s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { filter: drop-shadow(0 0 10px rgba(255, 107, 107, 0.5)); }
            to { filter: drop-shadow(0 0 20px rgba(78, 205, 196, 0.8)); }
        }

        .tagline {
            font-size: 1.2rem;
            opacity: 0.8;
            margin-bottom: 30px;
        }

        .main-player {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            padding: 40px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
        }

        .main-player::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: conic-gradient(from 0deg, transparent, rgba(255, 107, 107, 0.1), transparent);
            animation: rotate 20s linear infinite;
            pointer-events: none;
        }

        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .now-playing {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-bottom: 30px;
            position: relative;
            z-index: 1;
        }

        .album-art {
            width: 120px;
            height: 120px;
            border-radius: 16px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            animation: pulse 2s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .track-info h2 {
            font-size: 1.8rem;
            margin-bottom: 8px;
            color: #fff;
        }

        .track-info p {
            color: #b0b0b0;
            font-size: 1.1rem;
        }

        .controls {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
            position: relative;
            z-index: 1;
        }

        .control-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .control-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }

        .play-btn {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #ff6b6b, #4ecdc4);
            font-size: 1.5rem;
        }

        .play-btn:hover {
            background: linear-gradient(135deg, #ff5252, #26a69a);
        }

        .progress-container {
            margin-bottom: 30px;
            position: relative;
            z-index: 1;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            overflow: hidden;
            cursor: pointer;
            margin-bottom: 10px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
            border-radius: 4px;
            width: 0%;
            transition: width 0.3s ease;
        }

        .time-display {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
            color: #b0b0b0;
        }

        .volume-control {
            display: flex;
            align-items: center;
            gap: 10px;
            position: relative;
            z-index: 1;
        }

        .volume-slider {
            width: 120px;
            height: 4px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 2px;
            cursor: pointer;
            position: relative;
        }

        .volume-fill {
            height: 100%;
            background: linear-gradient(90deg, #45b7d1, #96ceb4);
            border-radius: 2px;
            width: 70%;
        }

        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .feature-card {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 25px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
        }

        .feature-card:hover {
            background: rgba(255, 255, 255, 0.12);
            transform: translateY(-5px);
        }

        .feature-title {
            font-size: 1.3rem;
            margin-bottom: 15px;
            color: #4ecdc4;
        }

        .playlist {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 25px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .playlist-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 20px;
        }

        .playlist-title {
            font-size: 1.5rem;
            color: #fff;
        }

        .track-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 12px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 8px;
        }

        .track-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .track-item.active {
            background: rgba(78, 205, 196, 0.2);
        }

        .track-number {
            width: 30px;
            text-align: center;
            color: #b0b0b0;
        }

        .track-details {
            flex: 1;
        }

        .track-name {
            font-weight: 500;
            margin-bottom: 4px;
        }

        .track-artist {
            color: #b0b0b0;
            font-size: 0.9rem;
        }

        .track-duration {
            color: #b0b0b0;
            font-size: 0.9rem;
        }

        .equalizer {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 25px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            margin-top: 20px;
        }

        .eq-title {
            font-size: 1.3rem;
            margin-bottom: 20px;
            color: #ff6b6b;
        }

        .eq-controls {
            display: flex;
            gap: 15px;
            justify-content: center;
        }

        .eq-band {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }

        .eq-slider {
            width: 4px;
            height: 100px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 2px;
            cursor: pointer;
            position: relative;
        }

        .eq-handle {
            width: 16px;
            height: 16px;
            background: linear-gradient(135deg, #ff6b6b, #4ecdc4);
            border-radius: 50%;
            position: absolute;
            left: -6px;
            top: 50%;
            cursor: pointer;
            transform: translateY(-50%);
        }

        .eq-label {
            font-size: 0.8rem;
            color: #b0b0b0;
        }

        .visualizer {
            display: flex;
            align-items: end;
            justify-content: center;
            gap: 3px;
            height: 60px;
            margin: 20px 0;
        }

        .bar {
            width: 4px;
            background: linear-gradient(to top, #ff6b6b, #4ecdc4);
            border-radius: 2px;
            animation: dance 1s ease-in-out infinite;
        }

        @keyframes dance {
            0%, 100% { height: 10px; }
            50% { height: 40px; }
        }

        .floating-elements {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .floating-circle {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 107, 107, 0.1);
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }

        .file-input {
            display: none;
        }

        .upload-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            border: none;
            border-radius: 12px;
            padding: 12px 24px;
            color: white;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            margin-right: 10px;
        }

        .upload-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        @media (max-width: 768px) {
            .controls {
                gap: 15px;
            }
            
            .control-btn {
                width: 50px;
                height: 50px;
            }
            
            .play-btn {
                width: 70px;
                height: 70px;
            }
            
            .now-playing {
                flex-direction: column;
                text-align: center;
            }
            
            .eq-controls {
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="floating-elements">
        <div class="floating-circle" style="width: 100px; height: 100px; top: 10%; left: 10%; animation-delay: 0s;"></div>
        <div class="floating-circle" style="width: 60px; height: 60px; top: 20%; right: 20%; animation-delay: 1s; background: rgba(78, 205, 196, 0.1);"></div>
        <div class="floating-circle" style="width: 80px; height: 80px; bottom: 20%; left: 20%; animation-delay: 2s; background: rgba(69, 183, 209, 0.1);"></div>
        <div class="floating-circle" style="width: 120px; height: 120px; bottom: 10%; right: 10%; animation-delay: 3s; background: rgba(150, 206, 180, 0.1);"></div>
    </div>

    <div class="container">
        <div class="header">
            <h1 class="logo">SoundWave</h1>
            <p class="tagline">Experience Music Like Never Before</p>
        </div>

        <div class="main-player">
            <div class="now-playing">
                <div class="album-art">🎵</div>
                <div class="track-info">
                    <h2 id="track-title">Select a track to play</h2>
                    <p id="track-artist">Upload your music to get started</p>
                </div>
            </div>

            <div class="visualizer">
                <div class="bar" style="animation-delay: 0s;"></div>
                <div class="bar" style="animation-delay: 0.1s;"></div>
                <div class="bar" style="animation-delay: 0.2s;"></div>
                <div class="bar" style="animation-delay: 0.3s;"></div>
                <div class="bar" style="animation-delay: 0.4s;"></div>
                <div class="bar" style="animation-delay: 0.5s;"></div>
                <div class="bar" style="animation-delay: 0.6s;"></div>
                <div class="bar" style="animation-delay: 0.7s;"></div>
                <div class="bar" style="animation-delay: 0.8s;"></div>
                <div class="bar" style="animation-delay: 0.9s;"></div>
                <div class="bar" style="animation-delay: 1s;"></div>
                <div class="bar" style="animation-delay: 1.1s;"></div>
                <div class="bar" style="animation-delay: 1.2s;"></div>
                <div class="bar" style="animation-delay: 1.3s;"></div>
                <div class="bar" style="animation-delay: 1.4s;"></div>
            </div>

            <div class="controls">
                <button class="control-btn" id="prev-btn">⏮</button>
                <button class="control-btn play-btn" id="play-btn">▶</button>
                <button class="control-btn" id="next-btn">⏭</button>
                <button class="control-btn" id="shuffle-btn">🔀</button>
                <button class="control-btn" id="repeat-btn">🔁</button>
            </div>

            <div class="progress-container">
                <div class="progress-bar" id="progress-bar">
                    <div class="progress-fill" id="progress-fill"></div>
                </div>
                <div class="time-display">
                    <span id="current-time">0:00</span>
                    <span id="total-time">0:00</span>
                </div>
            </div>

            <div class="volume-control">
                <span>🔊</span>
                <div class="volume-slider" id="volume-slider">
                    <div class="volume-fill" id="volume-fill"></div>
                </div>
            </div>
        </div>

        <div class="features">
            <div class="feature-card">
                <h3 class="feature-title">Upload Music</h3>
                <p>Upload your favorite tracks and build your personal music library</p>
                <br>
                <input type="file" id="file-input" class="file-input" accept="audio/*" multiple>
                <button class="upload-btn" onclick="document.getElementById('file-input').click()">Choose Files</button>
            </div>

            <div class="feature-card">
                <h3 class="feature-title">Smart Playlists</h3>
                <p>Automatically organized playlists based on your listening habits and preferences</p>
            </div>

            <div class="feature-card">
                <h3 class="feature-title">High-Quality Audio</h3>
                <p>Supports lossless audio formats for the ultimate listening experience</p>
            </div>
        </div>

        <div class="playlist">
            <div class="playlist-header">
                <h3 class="playlist-title">Your Playlist</h3>
            </div>
            <div id="playlist-content">
                <div class="track-item">
                    <div class="track-number">1</div>
                    <div class="track-details">
                        <div class="track-name">Upload tracks to see them here</div>
                        <div class="track-artist">Your music library</div>
                    </div>
                    <div class="track-duration">-:--</div>
                </div>
            </div>
        </div>

        <div class="equalizer">
            <h3 class="eq-title">Equalizer</h3>
            <div class="eq-controls">
                <div class="eq-band">
                    <div class="eq-slider">
                        <div class="eq-handle" style="top: 40%;"></div>
                    </div>
                    <div class="eq-label">60Hz</div>
                </div>
                <div class="eq-band">
                    <div class="eq-slider">
                        <div class="eq-handle" style="top: 30%;"></div>
                    </div>
                    <div class="eq-label">230Hz</div>
                </div>
                <div class="eq-band">
                    <div class="eq-slider">
                        <div class="eq-handle" style="top: 50%;"></div>
                    </div>
                    <div class="eq-label">910Hz</div>
                </div>
                <div class="eq-band">
                    <div class="eq-slider">
                        <div class="eq-handle" style="top: 45%;"></div>
                    </div>
                    <div class="eq-label">4kHz</div>
                </div>
                <div class="eq-band">
                    <div class="eq-slider">
                        <div class="eq-handle" style="top: 35%;"></div>
                    </div>
                    <div class="eq-label">14kHz</div>
                </div>
            </div>
        </div>
    </div>

    <audio id="audio-player" preload="metadata"></audio>

    <script>
        class AudioPlayer {
            constructor() {
                this.audio = document.getElementById('audio-player');
                this.playlist = [];
                this.currentIndex = 0;
                this.isPlaying = false;
                this.isShuffled = false;
                this.isRepeating = false;
                
                this.initializeElements();
                this.attachEventListeners();
            }

            initializeElements() {
                this.playBtn = document.getElementById('play-btn');
                this.prevBtn = document.getElementById('prev-btn');
                this.nextBtn = document.getElementById('next-btn');
                this.shuffleBtn = document.getElementById('shuffle-btn');
                this.repeatBtn = document.getElementById('repeat-btn');
                this.progressBar = document.getElementById('progress-bar');
                this.progressFill = document.getElementById('progress-fill');
                this.currentTimeEl = document.getElementById('current-time');
                this.totalTimeEl = document.getElementById('total-time');
                this.trackTitle = document.getElementById('track-title');
                this.trackArtist = document.getElementById('track-artist');
                this.volumeSlider = document.getElementById('volume-slider');
                this.volumeFill = document.getElementById('volume-fill');
                this.fileInput = document.getElementById('file-input');
                this.playlistContent = document.getElementById('playlist-content');
            }

            attachEventListeners() {
                this.playBtn.addEventListener('click', () => this.togglePlay());
                this.prevBtn.addEventListener('click', () => this.previousTrack());
                this.nextBtn.addEventListener('click', () => this.nextTrack());
                this.shuffleBtn.addEventListener('click', () => this.toggleShuffle());
                this.repeatBtn.addEventListener('click', () => this.toggleRepeat());
                
                this.progressBar.addEventListener('click', (e) => this.setProgress(e));
                this.volumeSlider.addEventListener('click', (e) => this.setVolume(e));
                this.fileInput.addEventListener('change', (e) => this.handleFileUpload(e));
                
                this.audio.addEventListener('loadedmetadata', () => this.updateTotalTime());
                this.audio.addEventListener('timeupdate', () => this.updateProgress());
                this.audio.addEventListener('ended', () => this.handleTrackEnd());
            }

            handleFileUpload(event) {
                const files = Array.from(event.target.files);
                
                files.forEach((file, index) => {
                    const url = URL.createObjectURL(file);
                    const track = {
                        name: file.name.replace(/\.[^/.]+$/, ""),
                        artist: "Unknown Artist",
                        url: url,
                        duration: "0:00"
                    };
                    
                    this.playlist.push(track);
                });
                
                this.updatePlaylistUI();
                
                if (this.playlist.length === files.length) {
                    this.loadTrack(0);
                }
            }

            updatePlaylistUI() {
                this.playlistContent.innerHTML = '';
                
                this.playlist.forEach((track, index) => {
                    const trackItem = document.createElement('div');
                    trackItem.className = 'track-item';
                    trackItem.innerHTML = `
                        <div class="track-number">${index + 1}</div>
                        <div class="track-details">
                            <div class="track-name">${track.name}</div>
                            <div class="track-artist">${track.artist}</div>
                        </div>
                        <div class="track-duration">${track.duration}</div>
                    `;
                    
                    trackItem.addEventListener('click', () => this.playTrack(index));
                    this.playlistContent.appendChild(trackItem);
                });
            }

            playTrack(index) {
                this.currentIndex = index;
                this.loadTrack(index);
                this.play();
            }

            loadTrack(index) {
                if (index >= 0 && index < this.playlist.length) {
                    const track = this.playlist[index];
                    this.audio.src = track.url;
                    this.trackTitle.textContent = track.name;
                    this.trackArtist.textContent = track.artist;
                    
                    document.querySelectorAll('.track-item').forEach(item => {
                        item.classList.remove('active');
                    });
                    
                    const activeItem = document.querySelectorAll('.track-item')[index];
                    if (activeItem) {
                        activeItem.classList.add('active');
                    }
                }
            }

            togglePlay() {
                if (this.playlist.length === 0) return;
                
                if (this.isPlaying) {
                    this.pause();
                } else {
                    this.play();
                }
            }

            play() {
                this.audio.play();
                this.isPlaying = true;
                this.playBtn.innerHTML = '⏸';
                this.animateVisualizer();
            }

            pause() {
                this.audio.pause();
                this.isPlaying = false;
                this.playBtn.innerHTML = '▶';
            }

            previousTrack() {
                if (this.playlist.length === 0) return;
                
                this.currentIndex = this.currentIndex > 0 ? this.currentIndex - 1 : this.playlist.length - 1;
                this.loadTrack(this.currentIndex);
                if (this.isPlaying) this.play();
            }

            nextTrack() {
                if (this.playlist.length === 0) return;
                
                if (this.isShuffled) {
                    this.currentIndex = Math.floor(Math.random() * this.playlist.length);
                } else {
                    this.currentIndex = this.currentIndex < this.playlist.length - 1 ? this.currentIndex + 1 : 0;
                }
                
                this.loadTrack(this.currentIndex);
                if (this.isPlaying) this.play();
            }

            toggleShuffle() {
                this.isShuffled = !this.isShuffled;
                this.shuffleBtn.style.background = this.isShuffled ? 
                    'linear-gradient(135deg, #ff6b6b, #4ecdc4)' : 
                    'rgba(255, 255, 255, 0.1)';
            }

            toggleRepeat() {
                this.isRepeating = !this.isRepeating;
                this.repeatBtn.style.background = this.isRepeating ? 
                    'linear-gradient(135deg, #ff6b6b, #4ecdc4)' : 
                    'rgba(255, 255, 255, 0.1)';
            }

            setProgress(event) {
                const rect = this.progressBar.getBoundingClientRect();
                const percent = (event.clientX - rect.left) / rect.width;
                this.audio.currentTime = percent * this.audio.duration;
            }

            setVolume(event) {
                const rect = this.volumeSlider.getBoundingClientRect();
                const percent = (event.clientX - rect.left) / rect.width;
                this.audio.volume = percent;
                this.volumeFill.style.width = percent * 100 + '%';
            }

            updateProgress() {
                const percent = (this.audio.currentTime / this.audio.duration) * 100;
                this.progressFill.style.width = percent + '%';
                this.currentTimeEl.textContent = this.formatTime(this.audio.currentTime);
            }

            updateTotalTime() {
                this.totalTimeEl.textContent = this.formatTime(this.audio.duration);
            }

            formatTime(seconds) {
                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = Math.floor(seconds % 60);
                return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
            }

            handleTrackEnd() {
                if (this.isRepeating) {
                    this.audio.currentTime = 0;
                    this.play();
                } else {
                    this.nextTrack();
                }
            }

            animateVisualizer() {
                const bars = document.querySelectorAll('.bar');
                bars.forEach((bar, index) => {
                    const height = Math.random() * 40 + 10;
                    bar.style.height = height + 'px';
                });
                
                if (this.isPlaying) {
                    setTimeout(() => this.animateVisualizer(), 200);
                }
            }
        }

        // Initialize the audio player when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new AudioPlayer();
        });

        // Equalizer interaction
        document.querySelectorAll('.eq-slider').forEach(slider => {
            slider.addEventListener('click', (e) => {
                const rect = slider.getBoundingClientRect();
                const percent = (rect.bottom - e.clientY) / rect.height;
                const handle = slider.querySelector('.eq-handle');
                handle.style.top = (100 - percent * 100) + '%';
            });
        });
    </script>
</body>
</html>